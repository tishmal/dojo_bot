package handler

import (
	"context"
	"dojo_bot/internal/svc"
	"log"

	"github.com/mymmrac/telego"
	"github.com/mymmrac/telego/telegoutil"
)

type UserHandlerInterface interface {
	SetupMenuButton(ctx context.Context) error
	HandleUpdate(update telego.Update) error
}

type userHandler struct {
	ctx     context.Context
	userSvc svc.UserSvcInterface
	bot     *telego.Bot
	appURL  string
	chanURL string
}

func NewUserHandler(ctx context.Context, userSvc svc.UserSvcInterface, bot *telego.Bot, appURL, chanURL string) UserHandlerInterface {
	handler := &userHandler{
		ctx:     ctx,
		userSvc: userSvc,
		bot:     bot,
		appURL:  appURL,
		chanURL: chanURL,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º menu button –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞
	if err := handler.SetupMenuButton(context.Background()); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ menu button: %v", err)
	}

	return handler
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –±–æ—Ç–∞
func (h *userHandler) SetupMenuButton(ctx context.Context) error {
	menuButton := &telego.MenuButtonWebApp{
		Type: telego.ButtonTypeWebApp,
		Text: "Play",
		WebApp: telego.WebAppInfo{
			URL: h.appURL,
		},
	}

	err := h.bot.SetChatMenuButton(ctx, &telego.SetChatMenuButtonParams{
		MenuButton: menuButton,
	})
	if err != nil {
		return err
	}

	log.Println("Menu button —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	return nil
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤
func (h *userHandler) HandleUpdate(update telego.Update) error {
	if update.Message != nil && update.Message.WebAppData != nil {
		return h.handleWebAppData(update)
	}

	if update.Message == nil {
		return nil
	}

	if update.Message.Text == "/start" {
		return h.handleStartCommand(update)
	}

	return h.handleRegularMessage(update)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
func (h *userHandler) handleWebAppData(update telego.Update) error {
	webAppData := update.Message.WebAppData.Data
	log.Printf("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: %s", webAppData)

	msg := telegoutil.Message(update.Message.Chat.ChatID(), "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: "+webAppData)
	_, err := h.bot.SendMessage(h.ctx, msg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
func (h *userHandler) handleStartCommand(update telego.Update) error {
	username := update.Message.From.Username
	firstname := update.Message.From.FirstName
	chatID := update.Message.Chat.ChatID()

	if err := h.userSvc.ProcessUser(username, firstname, chatID); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return err
	}

	webAppBtn := telegoutil.KeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É").
		WithWebApp(&telego.WebAppInfo{URL: h.appURL})

	regularBtn := telegoutil.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
	keyboard := telegoutil.Keyboard(
		telegoutil.KeyboardRow(webAppBtn),
		telegoutil.KeyboardRow(regularBtn))

	keyboard.ResizeKeyboard = true
	keyboard.OneTimeKeyboard = false

	msg := telegoutil.Message(chatID,
		"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dojo Bot!\n\n"+
			"‚ú® –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —á–µ—Ä–µ–∑:\n"+
			"‚Ä¢ –ö–Ω–æ–ø–∫—É –º–µ–Ω—é (—Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)\n"+
			"‚Ä¢ –ö–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"+
			"–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
	).WithReplyMarkup(keyboard)

	_, err := h.bot.SendMessage(h.ctx, msg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (h *userHandler) handleRegularMessage(update telego.Update) error {
	chatID := update.Message.Chat.ID
	var response string

	switch update.Message.Text {
	case "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
		response = "üì± –≠—Ç–æ Dojo Bot —Å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!\n\n" +
			"üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n" +
			"üí° –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."
	default:
		response = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é " + update.Message.From.Username + " üëã\n\n"
	}

	inlineKeyboard := &telego.InlineKeyboardMarkup{
		InlineKeyboard: [][]telego.InlineKeyboardButton{
			{
				{
					Text: "üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
					URL:  h.chanURL,
				},
			},
			{
				{
					Text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
					WebApp: &telego.WebAppInfo{
						URL: h.appURL,
					},
				},
			},
		},
	}

	msg := telego.SendMessageParams{
		ChatID:      telego.ChatID{ID: chatID},
		Text:        response,
		ReplyMarkup: inlineKeyboard,
	}
	_, err := h.bot.SendMessage(h.ctx, &msg)
	return err
}
